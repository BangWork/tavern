Comparator 使用说明文档
* `jsonschema_validation`：验证response数据结构是否合法

Args:
    val (`check_value`): 需要检查的数据（response）
    val (`schema`): 指定的schema

 * `equals`：验证是否相等，如果是list，包括顺序也会验证是否一致

Args:
    val (`check_value`): 需要检查的数据
    val (`expect_value`): 期待正确的数据

* `element_equals_with_index`: 验证数组中的某个下标对应的元素是否与指定对象相等

Args: 
    val (`check_list`): 需要检查的数组
    val (`expect_value`): 需要检查的元素
    val (`index`): 指定元素下标

该方法相当于 `equals(check_list[index], expect_value)`

* `equal_ignore_order`：验证两个列表是否有相同的元素，但不校验顺序
    
Args:
    val (`check_value`): 需要检查的数组
    val (`expect_value`): 期待正确的数组

* `list_equals_by_sorted_key`: 验证两个列表是否排序之后相等

Args: 
    val (`check_list`): 需要检查的数组
    val (`expect_list`): 需要对比的数组
    val (`sort_key`): 数组的元素排序使用的键
    val (`check_key`)?:  数组中的指定下标或者对象中的键，可选

没有`check_key`时，对 `check_list` 与 `expect_list`依据 `sort_key` 排序之后作比较 (`equals`)；有 `check_key`时，提取 `check_list`元素中的以 `check_key` 作为键的值的数组与 `expect_list` 作比较 (`equals`)

* `unique_item_in_list`：验证某个元素在列表中是唯一的
    
Args:
    val (`check_value`): 需要检查的数组
    val (`expect_value`): 期待正确的数组

* `less_than`: 验证是否小于

Args:
    val (`check_value`): 比较对象的前者
    val (`expect_value`): 比较对象的后者

* `less_than_or_equals`: 验证是否小于或等于

Args:
    val (`check_value`): 比较对象的前者
    val (`expect_value`): 比较对象的后者

* `greater_than`: 验证是否大于

Args:
    val (`check_value`): 比较对象的前者
    val (`expect_value`): 比较对象的后者

* `greater_than_or_equals`: 验证是否大于或等于

Args:
    val (`check_value`): 比较对象的前者
    val (`expect_value`): 比较对象的后者

* `not_equals`: 验证是否不等于

Args:
    val (`check_value`): 比较对象的前者
    val (`expect_value`): 比较对象的后者

两个对象的浅比较 `check_value != expect_value `

*  `string_equals`: 验证字符串是否相等

Args:
    val (`check_value`): 比较对象的前者
    val (`expect_value`): 比较对象的后者

* `length_equals`: 验证对象的长度

Args:
    val (`check_value`): 检查的对象
    val (`expect_value`): 期望值

* `length_greater_than`: 验证对象的长度是否大于

Args:
    val (`check_value`): 检查的对象
    val (`expect_value`): 期望值

* `length_greater_than_or_equals`: 验证对象的长度是否大于或者等于

Args:
    val (`check_value`): 检查的对象
    val (`expect_value`): 期望值

* `length_less_than`: 验证对象的长度是否小于

Args:
    val (`check_value`): 检查的对象
    val (`expect_value`): 期望值

 * `length_less_than_or_equals`: 验证对象的长度是否小于或者等于

Args:
    val (`check_value`): 检查的对象
    val (`expect_value`): 期望值

* `contains`：验证对象中是否包含某元素
    
Args: 
    val (`check_value`): 需要检查的对象
    val (`expect_value`): 被包含的元素

验证 `expect_value in check_value`

* `not_contains`：验证对象中是否不包含某元素
    
Args: 
    val (`check_value`): 需要检查的对象
    val (`expect_value`): 被包含的元素

验证 `expect_value not in check_value`

* `list_contains_with_items`：验证一个数组中有某个元素

Args:
    val (`check_list`): 需要检查的数组
    val (`check_value`): 需要检查的元素
    val (`unique_key`)?: 元素对象中的唯一键 key，可选
    val (`check_key`)?: 数组中的指定下标或者对象中的键列表，可选

* `list_not_contains_with_items`：验证一个数组没有某个元素

Args:
    val (`check_list`): 需要检查的数组
    val (`check_value`): 需要检查的元素
    val (`unique_key`)?: 元素对象中的唯一键 key，可选
    val (`check_key`)?: 数组中的指定下标或者对象中的键列表，可选

* `item_equals_in_list`: 验证数组中元素都相等
    
Args:
    val (`check_list`): 需要检查的数组
    val (`check_key `)?:  验证元素唯一键 key 或键数组，可选
    val (`expect_key`)?:  元素的比较对象，可选

没有 `check_key`时，直接与第一个元素 (`equals`) 对比；有 `check_key`时，需要将`expect_key`比较每个元素相关`check_key`的键值 (`equals`)对比

* `contained_by`: 验证两个数据的被包含关系 (`in`)
    
Args:
    val (`check_value`): 需要检查被包含的对象
    val (`expect_value`):  需要检查的对象

验证 `check_value in expect_value `

* `type_match`: 验证类型是否匹配

Args:
    val (`check_value`): 需要检查的对象
    val (`expect_value`): 期待的类型

* `regex_match`: 验证正则是否匹配

Args:
    val (`check_value`): 需要检查的对象
    val (`expect_value`): 满足的正则匹配

* `startswith`: 验证字符串是否以另一字符串开头

Args:
    val (`check_value`): 检查的字符串
    val (`expect_value`): 某字符串

* `endswith`: 验证字符串是否以另一字符串结尾

Args:
    val (`check_value`): 检查的字符串
    val (`expect_value`): 某字符串